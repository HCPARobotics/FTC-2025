package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;

import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;

@TeleOp(name = "External IMU Debug", group = "Examples")
public class ExternalIMUDebug extends LinearOpMode {

    private BNO055IMU imu;
    private Orientation angles;

    @Override
    public void runOpMode() {
        // Print all hardware names so we can confirm "imu" exists
        for (String name : hardwareMap.getAllNames()) {
            telemetry.addLine("Device: " + name);
        }
        telemetry.update();

        // IMU parameters
        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        parameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;
        parameters.accelUnit = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;
        parameters.loggingEnabled = true;

        // Try to grab "imu"
        imu = hardwareMap.get(BNO055IMU.class, "imu");

        telemetry.addLine("Initializing IMU...");
        telemetry.update();

        imu.initialize(parameters);

        // Wait for calibration
        while (!isStopRequested() && !imu.isGyroCalibrated()) {
            sleep(50);
            idle();
            telemetry.addData("Status", "Calibrating: %s", imu.getCalibrationStatus());
            telemetry.update();
        }

        telemetry.addData("Status", "IMU Ready");
        telemetry.update();

        waitForStart();

        while (opModeIsActive()) {
            angles = imu.getAngularOrientation(
                    AxesReference.INTRINSIC,
                    AxesOrder.ZYX,
                    AngleUnit.DEGREES
            );

            telemetry.addData("Heading (Z)", angles.firstAngle);
            telemetry.addData("Roll (X)", angles.secondAngle);
            telemetry.addData("Pitch (Y)", angles.thirdAngle);
            telemetry.addData("Calibration", imu.getCalibrationStatus().toString());
            telemetry.update();
        }
    }
}
package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Gamepad;

@com.qualcomm.robotcore.eventloop.opmode.TeleOp(name="MecanumDrive", group="Linear Opmode")
public class MecanumDrive extends LinearOpMode {

    // Declare hardware variables
    DcMotor frontierMotor = null;
    DcMotor backerMotor = null;
    DcMotor leftMotor = null;
    DcMotor rightMotor = null;

    @Override
    public void runOpMode() {
        // Initialize the motors
        frontierMotor = hardwareMap.get(DcMotor.class, "Frontier");
        backerMotor = hardwareMap.get(DcMotor.class, "Backer");
        leftMotor = hardwareMap.get(DcMotor.class, "Left");
        rightMotor = hardwareMap.get(DcMotor.class, "Right");

        // Set motors to run without encoders (for regular operation)
        frontierMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        backerMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        leftMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        rightMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        // Wait for the start of the game
        waitForStart();

        // Main driving loop
        while (opModeIsActive()) {
            // Get joystick values from the gamepad
            double drive = -gamepad1.left_stick_y;  // Forward/backward
            double strafe = gamepad1.left_stick_x;  // Left/right
            double rotate = gamepad1.right_stick_x; // Rotation (turning)

            // Calculate motor powers based on mecanum drive kinematics
            double frontLeftPower = drive + strafe + rotate;
            double frontRightPower = drive - strafe - rotate;
            double backLeftPower = drive - strafe + rotate;
            double backRightPower = drive + strafe - rotate;

            // Normalize the motor powers to ensure they don't exceed 1 or -1
            double maxPower = Math.max(Math.max(Math.abs(frontLeftPower), Math.abs(frontRightPower)),
                                       Math.max(Math.abs(backLeftPower), Math.abs(backRightPower)));

            if (maxPower > 1.0) {
                frontLeftPower /= maxPower;
                frontRightPower /= maxPower;
                backLeftPower /= maxPower;
                backRightPower /= maxPower;
            }

            // Set the power to each motor
            frontierMotor.setPower(frontLeftPower);
            rightMotor.setPower(frontRightPower);
            leftMotor.setPower(backLeftPower);
            backerMotor.setPower(backRightPower);

            // Display telemetry (optional)
            telemetry.addData("FL Power", frontLeftPower);
            telemetry.addData("FR Power", frontRightPower);
            telemetry.addData("BL Power", backLeftPower);
            telemetry.addData("BR Power", backRightPower);
            telemetry.update();
        }
    }
}
package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;

@TeleOp(name = "MecanumDriveWithEncoders", group = "TeleOp")
public class MecanumDriveWithEncoders extends LinearOpMode {

    private DcMotor frontLeft;
    private DcMotor frontRight;
    private DcMotor backLeft;
    private DcMotor backRight;

    @Override
    public void runOpMode() {
        // Map motors
        frontLeft  = hardwareMap.get(DcMotor.class, "frontLeft");
        frontRight = hardwareMap.get(DcMotor.class, "frontRight");
        backLeft   = hardwareMap.get(DcMotor.class, "backLeft");
        backRight  = hardwareMap.get(DcMotor.class, "backRight");

        // Reverse the right side so forward is correct
        frontRight.setDirection(DcMotor.Direction.REVERSE);
        backRight.setDirection(DcMotor.Direction.REVERSE);

        // Reset encoders at start
        frontLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        frontRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        // Run using encoders
        frontLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        frontRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        waitForStart();

        while (opModeIsActive()) {
            // Gamepad input
            double y = -gamepad1.left_stick_y;
            double x = gamepad1.left_stick_x * 1.1;
            double rx = gamepad1.right_stick_x;

            // Calculate power
            double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1);
            double flPower = (y + x + rx) / denominator;
            double blPower = (y - x + rx) / denominator;
            double frPower = (y - x - rx) / denominator;
            double brPower = (y + x - rx) / denominator;

            // Apply power
            frontLeft.setPower(flPower);
            backLeft.setPower(blPower);
            frontRight.setPower(frPower);
            backRight.setPower(brPower);

            // Print motor power + encoder values
            telemetry.addData("Front Left", "pwr: %.2f enc: %d", flPower, frontLeft.getCurrentPosition());
            telemetry.addData("Front Right", "pwr: %.2f enc: %d", frPower, frontRight.getCurrentPosition());
            telemetry.addData("Back Left", "pwr: %.2f enc: %d", blPower, backLeft.getCurrentPosition());
            telemetry.addData("Back Right", "pwr: %.2f enc: %d", brPower, backRight.getCurrentPosition());
            telemetry.update();
        }
    }
}



package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;

import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;

@TeleOp(name = "MecanumDriveWithIMU", group = "TeleOp")
public class MecanumDriveWithIMU extends LinearOpMode {

    private DcMotor frontLeft;
    private DcMotor frontRight;
    private DcMotor backLeft;
    private DcMotor backRight;

    private BNO055IMU imu;
    private Orientation angles;

    private double lastHeading = 0;  // to keep track of the previous heading

    @Override
    public void runOpMode() {
        // Map motors
        frontLeft  = hardwareMap.get(DcMotor.class, "frontLeft");
        frontRight = hardwareMap.get(DcMotor.class, "frontRight");
        backLeft   = hardwareMap.get(DcMotor.class, "backLeft");
        backRight  = hardwareMap.get(DcMotor.class, "backRight");

        // Reverse right side motors
        frontRight.setDirection(DcMotor.Direction.REVERSE);
        backRight.setDirection(DcMotor.Direction.REVERSE);

        // IMU setup
        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        parameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;
        parameters.accelUnit = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;
        parameters.loggingEnabled = true;

        imu = hardwareMap.get(BNO055IMU.class, "imu");
        imu.initialize(parameters);

        // Wait for IMU calibration
        while (!isStopRequested() && !imu.isGyroCalibrated()) {
            telemetry.addData("Status", "Calibrating: %s", imu.getCalibrationStatus());
            telemetry.update();
            sleep(50);
        }

        telemetry.addData("Status", "IMU Ready");
        telemetry.update();

        waitForStart();

        while (opModeIsActive()) {
            // Get the IMU heading
            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            double currentHeading = angles.firstAngle;

            // Read gamepad input for mecanum drive
            double y = -gamepad1.left_stick_y;
            double x = gamepad1.left_stick_x * 1.1;
            double rx = gamepad1.right_stick_x;

            // Calculate motor power for mecanum drive
            double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1);
            double flPower = (y + x + rx) / denominator;
            double blPower = (y - x + rx) / denominator;
            double frPower = (y - x - rx) / denominator;
            double brPower = (y + x - rx) / denominator;

            // Apply power to motors
            frontLeft.setPower(flPower);
            backLeft.setPower(blPower);
            frontRight.setPower(frPower);
            backRight.setPower(brPower);

            // Lock the robot's heading to the current orientation when pressing right bumper
            if (gamepad1.right_bumper) {
                lastHeading = currentHeading;
            }

            // Rotate the robot to 90° or 45° relative to the last locked heading when left bumper is pressed
            if (gamepad1.left_bumper) {
                if (Math.abs(currentHeading - lastHeading) >= 90) {
                    lastHeading += 90;
                } else if (Math.abs(currentHeading - lastHeading) >= 45) {
                    lastHeading += 45;
                }
            }

            // Calculate difference between the current heading and the desired heading
            double headingError = lastHeading - currentHeading;
            if (headingError > 180) headingError -= 360;
            if (headingError < -180) headingError += 360;

            // Adjust motor power based on the heading error (to turn to the desired angle)
            double turnPower = headingError * 0.01;  // You can tweak this value for more responsive turning

            // Apply turning power to motors
            frontLeft.setPower(flPower + turnPower);
            backLeft.setPower(blPower + turnPower);
            frontRight.setPower(frPower - turnPower);
            backRight.setPower(brPower - turnPower);

            // Telemetry to show encoder values and heading
            telemetry.addData("Heading (Z)", angles.firstAngle);
            telemetry.addData("Front Left Enc", frontLeft.getCurrentPosition());
            telemetry.addData("Front Right Enc", frontRight.getCurrentPosition());
            telemetry.addData("Back Left Enc", backLeft.getCurrentPosition());
            telemetry.addData("Back Right Enc", backRight.getCurrentPosition());
            telemetry.addData("Last Locked Heading", lastHeading);
            telemetry.update();
        }
    }
}